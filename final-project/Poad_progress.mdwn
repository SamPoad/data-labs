# Progress Log

Project began on Feb 25, 2020

Decided to use a Malaria Dataset
<br> taken from https://lhncbc.nlm.nih.gov/publication/pub9932

the plan is to use this dataset to build a predictive model on whether a new entry has malaria or not.

Domain knowledge a bit to go into the staining process to identify malaria in cells, and then how to address visually.

Interesting thing to note about the data
* The CSV file for the uninfected class contains 201 entries since the normal cells from the infected patientsâ€™ slides also make it to the normal cell category (151+50 = 201)

Remember that this will all be a Python file eventually, so pickle the model that you settle on. 

plan - start a Jupyter notebook for relevant sections

Day 1 target - read the images as arrays, take this data and store as a SQL database.
(this will show Python knowledge)
one table as infected, another table as uninfected

Read in the SQL data to start the model (show SQL knowledge)
concat the dataframes and create a target column to identify Malaria (1) or not (0)

the Features of the dataset will be the array information itself.

Review the image processing / neural network lesson - do i need to reduce the complexity of the images at all? 
My images are very small, and few colors, but I have 27.5k of them to process.

Get an overall sense of SIZE of the data. roughtly 28,000 images at what pixel height/width? 

Day 1 - ran into - how to get these images into their array of pixel values? 
research: 
https://machinelearningmastery.com/how-to-load-and-manipulate-images-for-deep-learning-in-python-with-pil-pillow/

combined this with existing knowledge of matplotlib.pyplot and matplotlib.Image

first obstacle - how to read in images as an array of pixel data? - solved
second obstacle - how to create a dataframe out of this? because this dataframe will need to be written to a database.



Day 2 target - read the SQL together, and concat the dataframes to create the dataset I need to be using. 
Next - work some heavy Principal Component Analysis (PCA) from Module-2 for reducing dimensionality of the images? 
or reduce it to black and white based on whether the stain appears or not?
Day 2 Actual - read in all the images and save to a SQL database
images come in like 
array([[[0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.],
        ...,
which makes sense
so i've read each of the parasitized image arrays into a dataframe. remember to git commit this. 

### Overall plan
read in and review the image data - exploratory

read in the parasitized images
convert to an array
label as parasitized
save that to a database table

read in the normal images
convert to an array
label as non-parasitized
save that to a database table

read in the two tables
concat/join/merge the dataframes
confirm the ~50% split between Classes

train_test_split the data

Try a Regression Model to build a baseline

keras.normalize between 0 and 1

initialize a Sequential Model

add input layers

compile

determine accuracy

tweak the hyperparameters, determine accuracy at each step

save the final model (pickle it)

grab a few images and run .predict, using .imshow() and .imsave() to grab the images for presentation

create a python file to import the model as a demo


